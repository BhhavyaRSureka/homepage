// ********RoostGPT********
// Test generated by RoostGPT for test NodeTesting using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
const { JSDOM } = require('jsdom');
const fs = require('fs');
const path = require('path');

const html = '<!DOCTYPE html><html><head></head><body></body></html>';
const { window } = new JSDOM(html);

global.window = window;
global.document = window.document;

const scriptContent = fs.readFileSync(path.resolve(__dirname, './extra.js'), 'utf-8');
eval(scriptContent);

describe('Test the subscription to document$', () => {

  let glimeScript;

  beforeEach(() => {
    glimeScript = null;
  });

  test('should create a new script element and append it to the document head', () => {
    document$.subscribe();
    expect(document.head.children.length).toBe(1);
    expect(document.head.children[0].getAttribute('src')).toBe('https://cdn.glimelab.ai/widget/1.0.0/widget.js');
    expect(document.head.children[0].getAttribute('onload')).toBe('onGlimeLoad()');
  });

  test('should create a new style element and append it to the document head', () => {
    glimeScript = document.createElement("script");
    glimeStyles = [{cssText: '.test {color: red;}'}, {cssText: '.test2 {color: blue;}'}, ];
    document$.subscribe();
    expect(document.head.children.length).toBe(1);
    expect(document.head.children[0].tagName).toBe('STYLE');
    expect(document.head.children[0].sheet.cssRules.length).toBe(2);
    expect(document.head.children[0].sheet.cssRules[0].cssText).toBe('.test {color: red;}');
    expect(document.head.children[0].sheet.cssRules[1].cssText).toBe('.test2 {color: blue;}');
  });
});
